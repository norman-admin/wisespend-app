/**
 * TEMPORAL-MANAGER.JS - Gestor de Per√≠odos y Navegaci√≥n Temporal
 * WiseSpend - Control de Gastos Familiares 
 * Versi√≥n: 1.0.0
 * 
 * üéØ FUNCIONALIDADES:
 * ‚úÖ Gesti√≥n completa de per√≠odos mensuales
 * ‚úÖ Navegaci√≥n entre per√≠odos con estados
 * ‚úÖ Clonaci√≥n autom√°tica y manual
 * ‚úÖ Sistema de desbloqueo temporal libre
 * ‚úÖ Auto-archivo de per√≠odos anteriores
 * ‚úÖ Integraci√≥n perfecta con sistema actual
 */

class TemporalManager {
    constructor() {
        this.temporalStorage = null;
        this.isInitialized = false;
        this.currentActivePeriod = null;
        this.navigationCallbacks = new Map();
        
        // Estados de per√≠odo
        this.states = {
            ACTIVE: 'active',
            ARCHIVED: 'archived',
            UNLOCKED: 'unlocked', 
            PREPARING: 'preparing'
        };
        
        // Configuraci√≥n
        this.config = {
            maxFuturePeriods: 12, // M√°ximo 12 meses futuros
            maxUnlockedPeriods: 1, // Solo 1 per√≠odo desbloqueado simult√°neamente
            autoArchiveEnabled: true,
            cloneOnCreate: true
        };
        
        this.initializeManager();
    }

    /**
     * INICIALIZACI√ìN DEL MANAGER
     */
    
    /**
     * Inicializar el gestor temporal
     */
    async initializeManager() {
        console.log('üéØ Inicializando TemporalManager...');
        
        try {
            // 1. Inicializar storage temporal
            await this.initializeTemporalStorage();
            
            // 2. Configurar per√≠odo actual
            this.setupCurrentPeriod();
            
            // 3. Configurar listeners de eventos
            this.setupEventListeners();
            
            // 4. Verificar y limpiar per√≠odos antiguos
            this.cleanupOldPeriods();
            
            this.isInitialized = true;
            console.log('‚úÖ TemporalManager inicializado correctamente');
            
        } catch (error) {
            console.error('‚ùå Error inicializando TemporalManager:', error);
            this.handleInitializationError(error);
        }
    }
    
    /**
     * Inicializar storage temporal
     */
    async initializeTemporalStorage() {
        // Verificar dependencias
        if (!window.TemporalStorage) {
            throw new Error('TemporalStorage no est√° disponible');
        }
        
        this.temporalStorage = new window.TemporalStorage();
        await this.waitForStorageReady();
        
        console.log('üíæ TemporalStorage inicializado');
    }
    
    /**
     * Esperar a que el storage est√© listo
     */
    waitForStorageReady() {
        return new Promise((resolve) => {
            const checkReady = () => {
                if (this.temporalStorage && this.temporalStorage.currentPeriod) {
                    resolve();
                } else {
                    setTimeout(checkReady, 100);
                }
            };
            checkReady();
        });
    }
    
    /**
     * Configurar per√≠odo actual
     */
    setupCurrentPeriod() {
        this.currentActivePeriod = this.temporalStorage.currentPeriod;
        
        // Asegurar que el per√≠odo actual est√© activo
        const currentState = this.temporalStorage.getPeriodState(this.currentActivePeriod);
        if (currentState !== this.states.ACTIVE) {
            this.temporalStorage.setPeriodState(this.currentActivePeriod, this.states.ACTIVE);
        }
        
        console.log(`üìÖ Per√≠odo actual configurado: ${this.currentActivePeriod}`);
    }
    
    /**
     * Configurar listeners de eventos
     */
    setupEventListeners() {
        // Eventos de storage temporal
        window.addEventListener('temporalStorageSaved', (e) => this.handleStorageSaved(e));
        window.addEventListener('periodCloned', (e) => this.handlePeriodCloned(e));
        window.addEventListener('periodUnlocked', (e) => this.handlePeriodUnlocked(e));
        window.addEventListener('periodLocked', (e) => this.handlePeriodLocked(e));
        
        // Evento de cambio de mes (detecci√≥n autom√°tica)
        this.setupMonthChangeDetection();
    }
    
    /**
     * Limpiar per√≠odos antiguos (opcional)
     */
    cleanupOldPeriods() {
        const index = this.temporalStorage.getPeriodsIndex();
        const cutoffDate = new Date();
        cutoffDate.setFullYear(cutoffDate.getFullYear() - 1); // 1 a√±o atr√°s
        
        const cutoffPeriod = this.formatPeriod(cutoffDate);
        
        index.periods.forEach(period => {
            if (period < cutoffPeriod) {
                console.log(`üóëÔ∏è Considerando limpieza de per√≠odo antiguo: ${period}`);
                // Aqu√≠ podr√≠amos implementar limpieza autom√°tica si se desea
            }
        });
    }

    /**
     * NAVEGACI√ìN ENTRE PER√çODOS
     */
    
    /**
     * Cambiar a un per√≠odo espec√≠fico
     */
    async switchToPeriod(targetPeriod) {
        console.log(`üîÑ Cambiando a per√≠odo: ${targetPeriod}`);
        
        try {
            // 1. Validar que el per√≠odo existe
            if (!this.periodExists(targetPeriod)) {
                throw new Error(`Per√≠odo ${targetPeriod} no existe`);
            }
            
            // 2. Verificar estado del per√≠odo
            const periodState = this.temporalStorage.getPeriodState(targetPeriod);
            if (!this.temporalStorage.isPeriodEditable(targetPeriod) && periodState === this.states.ARCHIVED) {
                throw new Error(`Per√≠odo ${targetPeriod} est√° archivado. Debe desbloquearlo primero.`);
            }
            
            // 3. Re-bloquear per√≠odo anterior si estaba desbloqueado
            await this.handlePeriodSwitch();
            
            // 4. Actualizar per√≠odo activo en memoria
            this.currentActivePeriod = targetPeriod;
            
            // 5. Actualizar storage temporal
            this.temporalStorage.currentPeriod = targetPeriod;
            
            // 6. Notificar cambio
            this.dispatchPeriodChangeEvent(targetPeriod);
            
            // 7. Ejecutar callbacks de navegaci√≥n
            await this.executeNavigationCallbacks(targetPeriod);
            
            console.log(`‚úÖ Cambio a per√≠odo ${targetPeriod} completado`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Error cambiando per√≠odo:', error);
            this.handleNavigationError(error, targetPeriod);
            return false;
        }
    }
    
    /**
     * Manejar cambio entre per√≠odos
     */
    async handlePeriodSwitch() {
        const index = this.temporalStorage.getPeriodsIndex();
        
        // Re-bloquear cualquier per√≠odo desbloqueado que no sea el actual
        index.periods.forEach(period => {
            const state = this.temporalStorage.getPeriodState(period);
            if (state === this.states.UNLOCKED && period !== this.currentActivePeriod) {
                this.temporalStorage.lockPeriod(period);
                console.log(`üîí Per√≠odo ${period} re-bloqueado autom√°ticamente`);
            }
        });
    }
    
    /**
     * Verificar si un per√≠odo existe
     */
    periodExists(period) {
        const index = this.temporalStorage.getPeriodsIndex();
        return index.periods.includes(period);
    }
    
    /**
     * Obtener informaci√≥n completa de per√≠odos
     */
    getPeriodsInfo() {
        const index = this.temporalStorage.getPeriodsIndex();
        const periodsData = [];
        
        index.periods.forEach(period => {
            const state = this.temporalStorage.getPeriodState(period);
            const isEditable = this.temporalStorage.isPeriodEditable(period);
            const isCurrent = period === this.currentActivePeriod;
            
            periodsData.push({
                period,
                state,
                isEditable,
                isCurrent,
                displayName: this.formatPeriodDisplay(period),
                canActivate: state === this.states.PREPARING,
                canUnlock: state === this.states.ARCHIVED,
                canSwitch: isEditable || state === this.states.ARCHIVED
            });
        });
        
        // Ordenar por per√≠odo (m√°s recientes primero)
        periodsData.sort((a, b) => b.period.localeCompare(a.period));
        
        return periodsData;
    }

    /**
     * CREACI√ìN Y CLONACI√ìN DE PER√çODOS
     */
    
    /**
     * Crear nuevo per√≠odo con clonaci√≥n
     */
    async createNewPeriod(targetPeriod, sourcePeriod = null) {
        console.log(`üÜï Creando nuevo per√≠odo: ${targetPeriod}`);
        
        try {
            // 1. Validar que el per√≠odo no existe
            if (this.periodExists(targetPeriod)) {
                throw new Error(`Per√≠odo ${targetPeriod} ya existe`);
            }
            
            // 2. Validar l√≠mites de per√≠odos futuros
            if (!this.validateFuturePeriodLimit(targetPeriod)) {
                throw new Error('Se ha alcanzado el l√≠mite de per√≠odos futuros');
            }
            
            // 3. Determinar per√≠odo fuente para clonaci√≥n
            const cloneSource = sourcePeriod || this.getDefaultCloneSource();
            
            if (!cloneSource) {
                throw new Error('No hay per√≠odo fuente disponible para clonaci√≥n');
            }
            
            // 4. Ejecutar clonaci√≥n
            const cloneSuccess = this.temporalStorage.clonePeriod(cloneSource, targetPeriod);
            if (!cloneSuccess) {
                throw new Error('Error en la clonaci√≥n del per√≠odo');
            }
            
            // 5. Configurar como per√≠odo en preparaci√≥n
            this.temporalStorage.setPeriodState(targetPeriod, this.states.PREPARING);
            
            // 6. Notificar creaci√≥n
            this.dispatchPeriodCreatedEvent(targetPeriod, cloneSource);
            
            console.log(`‚úÖ Per√≠odo ${targetPeriod} creado exitosamente (clonado desde ${cloneSource})`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Error creando per√≠odo:', error);
            this.handleCreationError(error, targetPeriod);
            return false;
        }
    }
    
    /**
     * Obtener per√≠odo fuente por defecto para clonaci√≥n
     */
    getDefaultCloneSource() {
        const index = this.temporalStorage.getPeriodsIndex();
        
        // Buscar el per√≠odo m√°s reciente con datos completos
        const sortedPeriods = [...index.periods].sort().reverse();
        
        for (const period of sortedPeriods) {
            const validation = this.temporalStorage.validatePeriodData(period);
            if (validation.isValid) {
                return period;
            }
        }
        
        return this.currentActivePeriod; // Fallback al per√≠odo actual
    }
    
    /**
     * Validar l√≠mite de per√≠odos futuros
     */
    validateFuturePeriodLimit(targetPeriod) {
        const currentPeriod = this.temporalStorage.getCurrentPeriod();
        const [currentYear, currentMonth] = currentPeriod.split('_').map(Number);
        const [targetYear, targetMonth] = targetPeriod.split('_').map(Number);
        
        const currentDate = new Date(currentYear, currentMonth - 1);
        const targetDate = new Date(targetYear, targetMonth - 1);
        
        const monthsDiff = (targetDate.getFullYear() - currentDate.getFullYear()) * 12 + 
                          (targetDate.getMonth() - currentDate.getMonth());
        
        return monthsDiff <= this.config.maxFuturePeriods;
    }

    /**
     * SISTEMA DE DESBLOQUEO
     */
    
    /**
     * Desbloquear per√≠odo archivado para edici√≥n libre
     */
    async unlockPeriod(period) {
        console.log(`üîì Desbloqueando per√≠odo: ${period}`);
        
        try {
            // 1. Validar que el per√≠odo est√° archivado
            const currentState = this.temporalStorage.getPeriodState(period);
            if (currentState !== this.states.ARCHIVED) {
                throw new Error(`Per√≠odo ${period} no est√° archivado (estado: ${currentState})`);
            }
            
            // 2. Verificar l√≠mite de per√≠odos desbloqueados
            if (!this.validateUnlockLimit()) {
                throw new Error('Ya hay un per√≠odo desbloqueado. Re-bloqu√©elo primero.');
            }
            
            // 3. Crear backup del per√≠odo
            this.temporalStorage.createPeriodBackup(period);
            
            // 4. Desbloquear per√≠odo
            const unlockSuccess = this.temporalStorage.unlockPeriod(period);
            if (!unlockSuccess) {
                throw new Error('Error desbloqueando per√≠odo');
            }
            
            // 5. Notificar desbloqueo
            this.dispatchPeriodUnlockedEvent(period);
            
            console.log(`‚úÖ Per√≠odo ${period} desbloqueado para edici√≥n libre`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Error desbloqueando per√≠odo:', error);
            this.handleUnlockError(error, period);
            return false;
        }
    }
    
    /**
     * Re-bloquear per√≠odo (archivar)
     */
    async lockPeriod(period) {
        console.log(`üîí Re-bloqueando per√≠odo: ${period}`);
        
        try {
            // 1. Validar que el per√≠odo est√° desbloqueado
            const currentState = this.temporalStorage.getPeriodState(period);
            if (currentState !== this.states.UNLOCKED) {
                throw new Error(`Per√≠odo ${period} no est√° desbloqueado (estado: ${currentState})`);
            }
            
            // 2. Re-bloquear per√≠odo
            const lockSuccess = this.temporalStorage.lockPeriod(period);
            if (!lockSuccess) {
                throw new Error('Error re-bloqueando per√≠odo');
            }
            
            // 3. Notificar re-bloqueo
            this.dispatchPeriodLockedEvent(period);
            
            console.log(`‚úÖ Per√≠odo ${period} re-bloqueado exitosamente`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Error re-bloqueando per√≠odo:', error);
            return false;
        }
    }
    
    /**
     * Validar l√≠mite de per√≠odos desbloqueados
     */
    validateUnlockLimit() {
        const index = this.temporalStorage.getPeriodsIndex();
        const unlockedCount = index.periods.filter(period => 
            this.temporalStorage.getPeriodState(period) === this.states.UNLOCKED
        ).length;
        
        return unlockedCount < this.config.maxUnlockedPeriods;
    }

    /**
     * ACTIVACI√ìN DE PER√çODOS
     */
    
    /**
     * Activar per√≠odo en preparaci√≥n
     */
    async activatePeriod(period) {
        console.log(`‚úÖ Activando per√≠odo: ${period}`);
        
        try {
            // 1. Validar que el per√≠odo est√° en preparaci√≥n
            const currentState = this.temporalStorage.getPeriodState(period);
            if (currentState !== this.states.PREPARING) {
                throw new Error(`Per√≠odo ${period} no est√° en preparaci√≥n (estado: ${currentState})`);
            }
            
            // 2. Archivar per√≠odo activo actual
            if (this.currentActivePeriod && this.currentActivePeriod !== period) {
                this.temporalStorage.setPeriodState(this.currentActivePeriod, this.states.ARCHIVED);
                console.log(`üìÅ Per√≠odo anterior ${this.currentActivePeriod} archivado`);
            }
            
            // 3. Activar nuevo per√≠odo
            this.temporalStorage.setPeriodState(period, this.states.ACTIVE);
            
            // 4. Actualizar per√≠odo activo
            this.currentActivePeriod = period;
            this.temporalStorage.currentPeriod = period;
            
            // 5. Cambiar a per√≠odo activo
            await this.switchToPeriod(period);
            
            // 6. Notificar activaci√≥n
            this.dispatchPeriodActivatedEvent(period);
            
            console.log(`‚úÖ Per√≠odo ${period} activado exitosamente`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Error activando per√≠odo:', error);
            this.handleActivationError(error, period);
            return false;
        }
    }

    /**
     * DETECCI√ìN DE CAMBIO DE MES
     */
    
    /**
     * Configurar detecci√≥n de cambio de mes
     */
    setupMonthChangeDetection() {
        // Verificar cambio de mes cada hora
        setInterval(() => {
            this.checkMonthChange();
        }, 3600000); // 1 hora
    }
    
    /**
     * Verificar cambio de mes
     */
    checkMonthChange() {
        const actualCurrentPeriod = this.temporalStorage.getCurrentPeriod();
        
        if (actualCurrentPeriod !== this.currentActivePeriod) {
            console.log(`üìÖ Cambio de mes detectado: ${this.currentActivePeriod} ‚Üí ${actualCurrentPeriod}`);
            this.handleMonthChange(actualCurrentPeriod);
        }
    }
    
    /**
     * Manejar cambio de mes autom√°tico
     */
    async handleMonthChange(newPeriod) {
        try {
            // 1. Archivar per√≠odo anterior autom√°ticamente
            if (this.currentActivePeriod) {
                this.temporalStorage.setPeriodState(this.currentActivePeriod, this.states.ARCHIVED);
                console.log(`üìÅ Per√≠odo ${this.currentActivePeriod} auto-archivado`);
            }
            
            // 2. Verificar si el nuevo per√≠odo existe
            if (!this.periodExists(newPeriod)) {
                console.log(`üÜï Per√≠odo ${newPeriod} no existe, requiere creaci√≥n manual`);
                this.dispatchMonthChangeDetectedEvent(newPeriod);
                return;
            }
            
            // 3. Activar nuevo per√≠odo si est√° en preparaci√≥n
            const newPeriodState = this.temporalStorage.getPeriodState(newPeriod);
            if (newPeriodState === this.states.PREPARING) {
                await this.activatePeriod(newPeriod);
            } else {
                // Solo cambiar per√≠odo activo
                this.currentActivePeriod = newPeriod;
                this.temporalStorage.currentPeriod = newPeriod;
                this.temporalStorage.setPeriodState(newPeriod, this.states.ACTIVE);
            }
            
            this.dispatchMonthChangedEvent(newPeriod);
            
        } catch (error) {
            console.error('‚ùå Error manejando cambio de mes:', error);
        }
    }

    /**
     * UTILIDADES Y FORMATEADORES
     */
    
    /**
     * Formatear per√≠odo para mostrar
     */
    formatPeriodDisplay(period) {
        const [year, month] = period.split('_');
        const monthNames = [
            'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
            'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
        ];
        
        const monthIndex = parseInt(month) - 1;
        const monthName = monthNames[monthIndex] || `Mes ${month}`;
        
        return `${monthName} ${year}`;
    }
    
    /**
     * Formatear fecha a per√≠odo
     */
    formatPeriod(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        return `${year}_${month}`;
    }
    
    /**
     * Generar per√≠odo siguiente
     */
    getNextPeriod(period) {
        const [year, month] = period.split('_').map(Number);
        const date = new Date(year, month - 1);
        date.setMonth(date.getMonth() + 1);
        return this.formatPeriod(date);
    }
    
    /**
     * Generar per√≠odo anterior
     */
    getPreviousPeriod(period) {
        const [year, month] = period.split('_').map(Number);
        const date = new Date(year, month - 1);
        date.setMonth(date.getMonth() - 1);
        return this.formatPeriod(date);
    }
    
    /**
     * Obtener estado del sistema temporal
     */
    getSystemState() {
        const index = this.temporalStorage.getPeriodsIndex();
        const periodsInfo = this.getPeriodsInfo();
        
        return {
            isInitialized: this.isInitialized,
            currentActivePeriod: this.currentActivePeriod,
            totalPeriods: index.periods.length,
            periodsInfo,
            config: this.config,
            temporalInfo: this.temporalStorage.getTemporalInfo()
        };
    }

    /**
     * CALLBACKS DE NAVEGACI√ìN
     */
    
    /**
     * Registrar callback de navegaci√≥n
     */
    registerNavigationCallback(name, callback) {
        this.navigationCallbacks.set(name, callback);
        console.log(`üìã Callback de navegaci√≥n registrado: ${name}`);
    }
    
    /**
     * Remover callback de navegaci√≥n
     */
    removeNavigationCallback(name) {
        this.navigationCallbacks.delete(name);
        console.log(`üóëÔ∏è Callback de navegaci√≥n removido: ${name}`);
    }
    
    /**
     * Ejecutar callbacks de navegaci√≥n
     */
    async executeNavigationCallbacks(targetPeriod) {
        const promises = [];
        
        this.navigationCallbacks.forEach((callback, name) => {
            try {
                const result = callback(targetPeriod);
                if (result instanceof Promise) {
                    promises.push(result);
                }
                console.log(`‚úÖ Callback ${name} ejecutado`);
            } catch (error) {
                console.error(`‚ùå Error en callback ${name}:`, error);
            }
        });
        
        await Promise.all(promises);
    }

    /**
     * MANEJO DE ERRORES
     */
    
    handleInitializationError(error) {
        console.error('üö® Error cr√≠tico en inicializaci√≥n de TemporalManager:', error);
        // Aqu√≠ podr√≠an implementarse estrategias de recuperaci√≥n
    }
    
    handleNavigationError(error, targetPeriod) {
        console.error(`üö® Error navegando a per√≠odo ${targetPeriod}:`, error);
        // Notificar error al usuario
        this.dispatchNavigationErrorEvent(error, targetPeriod);
    }
    
    handleCreationError(error, targetPeriod) {
        console.error(`üö® Error creando per√≠odo ${targetPeriod}:`, error);
        this.dispatchCreationErrorEvent(error, targetPeriod);
    }
    
    handleUnlockError(error, period) {
        console.error(`üö® Error desbloqueando per√≠odo ${period}:`, error);
        this.dispatchUnlockErrorEvent(error, period);
    }
    
    handleActivationError(error, period) {
        console.error(`üö® Error activando per√≠odo ${period}:`, error);
        this.dispatchActivationErrorEvent(error, period);
    }

    /**
     * EVENTOS PERSONALIZADOS
     */
    
    dispatchPeriodChangeEvent(period) {
        const event = new CustomEvent('temporalPeriodChanged', {
            detail: { period, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchPeriodCreatedEvent(targetPeriod, sourcePeriod) {
        const event = new CustomEvent('temporalPeriodCreated', {
            detail: { targetPeriod, sourcePeriod, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchPeriodActivatedEvent(period) {
        const event = new CustomEvent('temporalPeriodActivated', {
            detail: { period, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchPeriodUnlockedEvent(period) {
        const event = new CustomEvent('temporalPeriodUnlocked', {
            detail: { period, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchPeriodLockedEvent(period) {
        const event = new CustomEvent('temporalPeriodLocked', {
            detail: { period, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchMonthChangeDetectedEvent(newPeriod) {
        const event = new CustomEvent('temporalMonthChangeDetected', {
            detail: { newPeriod, requiresManualCreation: true, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchMonthChangedEvent(newPeriod) {
        const event = new CustomEvent('temporalMonthChanged', {
            detail: { newPeriod, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchNavigationErrorEvent(error, targetPeriod) {
        const event = new CustomEvent('temporalNavigationError', {
            detail: { error: error.message, targetPeriod, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchCreationErrorEvent(error, targetPeriod) {
        const event = new CustomEvent('temporalCreationError', {
            detail: { error: error.message, targetPeriod, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchUnlockErrorEvent(error, period) {
        const event = new CustomEvent('temporalUnlockError', {
            detail: { error: error.message, period, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }
    
    dispatchActivationErrorEvent(error, period) {
        const event = new CustomEvent('temporalActivationError', {
            detail: { error: error.message, period, timestamp: new Date().toISOString() }
        });
        window.dispatchEvent(event);
    }

    /**
     * MANEJADORES DE EVENTOS DE STORAGE
     */
    
    handleStorageSaved(e) {
        // console.log('üíæ Storage temporal guardado:', e.detail);
        // Aqu√≠ podr√≠an implementarse notificaciones o actualizaciones de UI
    }
    
    handlePeriodCloned(e) {
        console.log('üîÑ Per√≠odo clonado:', e.detail);
        // Actualizar UI o notificar otros componentes
    }
    
    handlePeriodUnlocked(e) {
        console.log('üîì Per√≠odo desbloqueado:', e.detail);
        // Actualizar UI o iniciar auto-guardado
    }
    
    handlePeriodLocked(e) {
        console.log('üîí Per√≠odo bloqueado:', e.detail);
        // Actualizar UI o detener auto-guardado
    }

    /**
     * DESTRUCTOR
     */
    
    destroy() {
        if (this.temporalStorage) {
            this.temporalStorage.destroy();
        }
        
        this.navigationCallbacks.clear();
        this.isInitialized = false;
        
        console.log('üîß TemporalManager destruido');
    }
}

// Asignar a window para acceso global
window.TemporalManager = TemporalManager;

console.log('üéØ temporal-manager.js v1.0.0 cargado - Gestor temporal listo');